apply plugin: 'maven'

def getRepositoryUsername() {
    return hasProperty('nexusUsername') ? nexusUsername : ""
}

def getRepositoryPassword() {
    return hasProperty('nexusPassword') ? nexusPassword : ""
}

def publishLocal() {
    return hasProperty('local')
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.artifactId = POM_ARTIFACT_ID

				if(publishLocal()){
					def localMavenRepo = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
					repository(url: localMavenRepo)
				}
				else {
                    if(VERSION_NAME.endsWith('-SNAPSHOT')) {
                        repository(url: "http://nexus.arcsmed.at/content/repositories/android-snapshots/") {
                            authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                        }
                    }
                    else {
                        repository(url: "http://nexus.arcsmed.at/content/repositories/android/") {
                            authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                        }
                    }
				}
				
                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    task androidJavadocs(type: Javadoc) {
        //source = android.sourceSets.main.allJava
        options {
            linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
        }
        source = android.sourceSets.main.java.sourceFiles
        //classpath += project.files(android.plugin.getRuntimeJarList().join(File.pathSeparator))
        classpath += project.files(project.android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        //basename = artifact_id
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        //basename = artifact_id
        //from android.sourceSets.main.allSource
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}